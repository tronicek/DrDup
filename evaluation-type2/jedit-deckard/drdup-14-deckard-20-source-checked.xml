<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- The clones reported by DrDup and not reported by Deckard
112x    identifiers
33x     identifiers, literals
14x     type 1
-->
<clones>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/util/IOUtilities.java" startline="200" endline="213">
	public void closeQuietly(@Nullable ObjectInput in)
	{
		if (in != null)
		{
			try
			{
				in.close();
			}
			catch (IOException e)
			{
				// ignore
		}
		}
	}
</source>
        <source file="org/gjt/sp/util/IOUtilities.java" startline="221" endline="234">
	public void closeQuietly(@Nullable ObjectOutput out)
	{
		if (out != null)
		{
			try
			{
				out.close();
			}
			catch (IOException e)
			{
				// ignore
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/options/AbbrevsOptionPane.java" startline="410" endline="422">
		public Object getValueAt(int row, int col)
		{
			Abbrev abbrev = abbrevs.get(row);
			switch(col)
			{
				case 0:
					return abbrev.abbrev;
				case 1:
					return abbrev.expand;
				default:
					return null;
			}
		} //}}}
</source>
        <source file="org/gjt/sp/jedit/options/BrowserColorsOptionPane.java" startline="291" endline="304">
	public Object getValueAt(int row, int col)
	{
		Entry entry = entries.get(row);

		switch(col)
		{
		case 0:
			return entry.glob;
		case 1:
			return entry.color;
		default:
			return null;
		}
	} //}}}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/options/AbbrevsOptionPane.java" startline="410" endline="422">
		public Object getValueAt(int row, int col)
		{
			Abbrev abbrev = abbrevs.get(row);
			switch(col)
			{
				case 0:
					return abbrev.abbrev;
				case 1:
					return abbrev.expand;
				default:
					return null;
			}
		} //}}}
</source>
        <source file="org/gjt/sp/jedit/options/SyntaxHiliteOptionPane.java" startline="179" endline="191">
		public Object getValueAt(int row, int col)
		{
			StyleChoice ch = styleChoices.get(row);
			switch(col)
			{
				case 0:
					return ch.label;
				case 1:
					return ch.style;
				default:
					return null;
			}
		} //}}}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/options/BrowserColorsOptionPane.java" startline="291" endline="304">
	public Object getValueAt(int row, int col)
	{
		Entry entry = entries.get(row);

		switch(col)
		{
		case 0:
			return entry.glob;
		case 1:
			return entry.color;
		default:
			return null;
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/options/SyntaxHiliteOptionPane.java" startline="179" endline="191">
		public Object getValueAt(int row, int col)
		{
			StyleChoice ch = styleChoices.get(row);
			switch(col)
			{
				case 0:
					return ch.label;
				case 1:
					return ch.style;
				default:
					return null;
			}
		} //}}}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="714" endline="727">
    static float floatUnaryOperation(Float F, int kind)
    {
        float operand = F.floatValue();

        switch(kind)
        {
            case PLUS:
                return operand;
            case MINUS:
                return -operand;
            default:
                throw new InterpreterError("bad float unaryOperation");
        }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="729" endline="742">
    static double doubleUnaryOperation(Double D, int kind)
    {
        double operand = D.doubleValue();

        switch(kind)
        {
            case PLUS:
                return operand;
            case MINUS:
                return -operand;
            default:
                throw new InterpreterError("bad double unaryOperation");
        }
    }
</source>
    </clone>
    <clone nlines="16" similarity="100">
        <!-- identifiers -->
        <source file="installer/CBZip2InputStream.java" startline="277" endline="292">
    private void setupNoRandPartC()
    {
        if( j2 &lt; z )
        {
            m_currentChar = ch2;
            m_crc.updateCRC( ch2 );
            j2++;
        }
        else
        {
            m_currentState = NO_RAND_PART_A_STATE;
            i2++;
            count = 0;
            setupNoRandPartA();
        }
    }
</source>
        <source file="installer/CBZip2InputStream.java" startline="364" endline="379">
    private void setupRandPartC()
    {
        if( j2 &lt; z )
        {
            m_currentChar = ch2;
            m_crc.updateCRC( ch2 );
            j2++;
        }
        else
        {
            m_currentState = RAND_PART_A_STATE;
            i2++;
            count = 0;
            setupRandPartA();
        }
    }
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/jEdit.java" startline="765" endline="781">
	public static int getIntegerProperty(String name, int def)
	{
		String value = getProperty(name);
		if(value == null)
			return def;
		else
		{
			try
			{
				return Integer.parseInt(value.trim());
			}
			catch(NumberFormatException nf)
			{
				return def;
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/jEdit.java" startline="784" endline="800">
	public static double getDoubleProperty(String name, double def)
	{
		String value = getProperty(name);
		if(value == null)
			return def;
		else
		{
			try
			{
				return Double.parseDouble(value.trim());
			}
			catch(NumberFormatException nf)
			{
				return def;
			}
		}
	}
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="141" endline="158">
	@Override
	public void actionPerformed(ActionEvent evt)
	{
		Object source = evt.getSource();

		if(source == ok)
		{
			ok();
		}
		else if(source == cancel)
		{
			cancel();
		}
		else if(source == apply)
		{
			ok(false);
		}
	} //}}}
</source>
        <source file="org/jedit/options/TabbedOptionDialog.java" startline="140" endline="156">
	public void actionPerformed(ActionEvent evt)
	{
		Object source = evt.getSource();

		if (source == ok)
		{
			ok();
		}
		else if (source == cancel)
		{
			cancel();
		}
		else if (source == apply)
		{
			ok(false);
		}
	} // }}}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/PingPongList.java" startline="133" endline="146">
	public void setLeftTitle(String leftTitle)
	{
		if (leftTitle == null)
		{
			removeLeftTitle();
			return;
		}
		if (leftLabel == null)
		{
			leftLabel = new JLabel();
		}
		leftLabel.setText(leftTitle);
		leftPanel.add(leftLabel, BorderLayout.NORTH);
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/gui/PingPongList.java" startline="149" endline="162">
	public void setRightTitle(String rightTitle)
	{
		if (rightTitle == null)
		{
			removeRightTitle();
			return;
		}
		if (rightLabel == null)
		{
			rightLabel = new JLabel();
		}
		rightLabel.setText(rightTitle);
		rightPanel.add(rightLabel, BorderLayout.NORTH);
	} //}}}
</source>
    </clone>
    <clone nlines="15" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1733" endline="1747">
	protected void fireBeginUndo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.beginUndo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer undo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1750" endline="1764">
	protected void fireEndUndo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.endUndo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer undo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="15" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1733" endline="1747">
	protected void fireBeginUndo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.beginUndo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer undo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1767" endline="1781">
	protected void fireBeginRedo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.beginRedo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer begin redo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="15" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1733" endline="1747">
	protected void fireBeginUndo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.beginUndo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer undo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1784" endline="1798">
	protected void fireEndRedo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.endRedo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer end redo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="15" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1750" endline="1764">
	protected void fireEndUndo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.endUndo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer undo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1767" endline="1781">
	protected void fireBeginRedo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.beginRedo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer begin redo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="15" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1750" endline="1764">
	protected void fireEndUndo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.endUndo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer undo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1784" endline="1798">
	protected void fireEndRedo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.endRedo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer end redo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="15" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1767" endline="1781">
	protected void fireBeginRedo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.beginRedo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer begin redo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/Buffer.java" startline="1784" endline="1798">
	protected void fireEndRedo()
	{
		for (BufferUndoListener listener: undoListeners)
		{
			try
			{
				listener.endRedo(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer end redo event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/BeanShell.java" startline="212" endline="225">
	public static void runScript(View view, String path, Reader in,
		boolean ownNamespace)
	{
		try
		{
			_runScript(view,path,in,ownNamespace);
		}
		catch(Throwable e)
		{
			Log.log(Log.ERROR,BeanShell.class,e);

			bsh.handleException(view,path,e);
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/BeanShell.java" startline="247" endline="260">
	public static void runScript(View view, String path, Reader in,
		NameSpace namespace)
	{
		try
		{
			_runScript(view,path,in,namespace);
		}
		catch(Throwable e)
		{
			Log.log(Log.ERROR,BeanShell.class,e);

			bsh.handleException(view,path,e);
		}
	} //}}}
</source>
    </clone>
    <clone nlines="23" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="672" endline="691">
    static int intUnaryOperation(Integer I, int kind)
    {
        int operand = I.intValue();

        switch(kind)
        {
            case PLUS:
                return operand;
            case MINUS:
                return -operand;
            case TILDE:
                return ~operand;
            case INCR:
                return operand + 1;
            case DECR:
                return operand - 1;
            default:
                throw new InterpreterError("bad integer unaryOperation");
        }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="693" endline="712">
    static long longUnaryOperation(Long L, int kind)
    {
        long operand = L.longValue();

        switch(kind)
        {
            case PLUS:
                return operand;
            case MINUS:
                return -operand;
            case TILDE:
                return ~operand;
            case INCR:
                return operand + 1;
            case DECR:
                return operand - 1;
            default:
                throw new InterpreterError("bad long unaryOperation");
        }
    }
</source>
    </clone>
    <clone nlines="15" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4811" endline="4825">
  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    return false;
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="5437" endline="5451">
  final private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
    return false;
  }
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="81" endline="98">
		@Override
		public void update()
		{
			JEditTextArea textArea = view.getTextArea();
			if (textArea != null)
			{
				if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="86" endline="102">
		public void update()
		{
			JEditTextArea textArea = view.getTextArea();
			if (textArea != null)
			{
				if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
			}
		} //}}}
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="81" endline="98">
		@Override
		public void update()
		{
			JEditTextArea textArea = view.getTextArea();
			if (textArea != null)
			{
				if (textArea.isMultipleSelectionEnabled())
				{
					multiSelect.setText("M");
					multiSelect.setEnabled(true);
				}
				else
				{
					multiSelect.setText("m");
					multiSelect.setEnabled(false);
				}
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="82" endline="98">
	    public void update() 
	    {
		    JEditTextArea textArea = view.getTextArea();
		    if (textArea != null)
		    {
			    if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
		    }
	    }
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="86" endline="102">
		public void update()
		{
			JEditTextArea textArea = view.getTextArea();
			if (textArea != null)
			{
				if (textArea.isOverwriteEnabled())
				{
					overwrite.setText("O");
					overwrite.setEnabled(true);
				}
				else
				{
					overwrite.setText("o");
					overwrite.setEnabled(false);
				}
			}
		} //}}}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="82" endline="98">
	    public void update() 
	    {
		    JEditTextArea textArea = view.getTextArea();
		    if (textArea != null)
		    {
			    if (textArea.isRectangularSelectionEnabled())
			    {
				    rectSelect.setText("R");
				    rectSelect.setEnabled(true);
			    }
			    else
			    {
				    rectSelect.setText("r");
				    rectSelect.setEnabled(false);
			    }
		    }
	    }
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="583" endline="599">
	public String getText(int start, int length)
	{
		try
		{
			readLock();

			if(start &lt; 0 || length &lt; 0
				|| start + length &gt; contentMgr.getLength())
				throw new ArrayIndexOutOfBoundsException(start + ":" + length);

			return contentMgr.getText(start,length);
		}
		finally
		{
			readUnlock();
		}
	}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="660" endline="676">
	public CharSequence getSegment(int start, int length)
	{
		try
		{
			readLock();

			if(start &lt; 0 || length &lt; 0
				|| start + length &gt; contentMgr.getLength())
				throw new ArrayIndexOutOfBoundsException(start + ":" + length);

			return contentMgr.getSegment(start,length);
		}
		finally
		{
			readUnlock();
		}
	} //}}}
</source>
    </clone>
    <clone nlines="16" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2566" endline="2581">
	protected void fireTransactionComplete()
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.transactionComplete(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2584" endline="2599">
	protected void fireFoldHandlerChanged()
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldHandlerChanged(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="16" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2566" endline="2581">
	protected void fireTransactionComplete()
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.transactionComplete(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2602" endline="2617">
	protected void fireBufferLoaded()
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.bufferLoaded(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="16" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2584" endline="2599">
	protected void fireFoldHandlerChanged()
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.foldHandlerChanged(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2602" endline="2617">
	protected void fireBufferLoaded()
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.bufferLoaded(this);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/ClassWriter.java" startline="706" endline="719">
  Item newField (
    final String owner,
    final String name,
    final String desc)
  {
    key3.set(FIELD, owner, name, desc);
    Item result = get(key3);
    if (result == null) {
      put122(FIELD, newClass(owner).index, newNameType(name, desc).index);
      result = new Item(index++, key3);
      put(result);
    }
    return result;
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/ClassWriter.java" startline="731" endline="744">
  Item newMethod (
    final String owner,
    final String name,
    final String desc)
  {
    key3.set(METH, owner, name, desc);
    Item result = get(key3);
    if (result == null) {
      put122(METH, newClass(owner).index, newNameType(name, desc).index);
      result = new Item(index++, key3);
      put(result);
    }
    return result;
  }
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/ClassWriter.java" startline="706" endline="719">
  Item newField (
    final String owner,
    final String name,
    final String desc)
  {
    key3.set(FIELD, owner, name, desc);
    Item result = get(key3);
    if (result == null) {
      put122(FIELD, newClass(owner).index, newNameType(name, desc).index);
      result = new Item(index++, key3);
      put(result);
    }
    return result;
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/ClassWriter.java" startline="756" endline="769">
  Item newItfMethod (
    final String ownerItf,
    final String name,
    final String desc)
  {
    key3.set(IMETH, ownerItf, name, desc);
    Item result = get(key3);
    if (result == null) {
      put122(IMETH, newClass(ownerItf).index, newNameType(name, desc).index);
      result = new Item(index++, key3);
      put(result);
    }
    return result;
  }
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/ClassWriter.java" startline="731" endline="744">
  Item newMethod (
    final String owner,
    final String name,
    final String desc)
  {
    key3.set(METH, owner, name, desc);
    Item result = get(key3);
    if (result == null) {
      put122(METH, newClass(owner).index, newNameType(name, desc).index);
      result = new Item(index++, key3);
      put(result);
    }
    return result;
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/org/objectweb/asm/ClassWriter.java" startline="756" endline="769">
  Item newItfMethod (
    final String ownerItf,
    final String name,
    final String desc)
  {
    key3.set(IMETH, ownerItf, name, desc);
    Item result = get(key3);
    if (result == null) {
      put122(IMETH, newClass(ownerItf).index, newNameType(name, desc).index);
      result = new Item(index++, key3);
      put(result);
    }
    return result;
  }
</source>
    </clone>
    <clone nlines="16" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/PositionManager.java" startline="67" endline="82">
	public synchronized void contentInserted(int offset, int length)
	{
		if(positions.isEmpty())
			return;

		/* get all positions from offset to the end, inclusive */
		Iterator&lt;PosBottomHalf&gt; iter = positions.tailMap(new PosBottomHalf(offset))
			.keySet().iterator();

		iteration = true;
		while(iter.hasNext())
		{
			iter.next().contentInserted(offset,length);
		}
		iteration = false;
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/PositionManager.java" startline="85" endline="101">
	public synchronized void contentRemoved(int offset, int length)
	{
		if(positions.isEmpty())
			return;

		/* get all positions from offset to the end, inclusive */
		Iterator&lt;PosBottomHalf&gt; iter = positions.tailMap(new PosBottomHalf(offset))
			.keySet().iterator();

		iteration = true;
		while(iter.hasNext())
		{
			iter.next().contentRemoved(offset,length);
		}
		iteration = false;

	} //}}}
</source>
    </clone>
    <clone nlines="19" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="469" endline="487">
	public String getLineText(int line)
	{
		if(line &lt; 0 || line &gt;= lineMgr.getLineCount())
			throw new ArrayIndexOutOfBoundsException(line);

		try
		{
			readLock();

			int start = line == 0 ? 0 : lineMgr.getLineEndOffset(line - 1);
			int end = lineMgr.getLineEndOffset(line);

			return getText(start,end - start - 1);
		}
		finally
		{
			readUnlock();
		}
	}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="557" endline="575">
	public CharSequence getLineSegment(int line)
	{
		if(line &lt; 0 || line &gt;= lineMgr.getLineCount())
			throw new ArrayIndexOutOfBoundsException(line);

		try
		{
			readLock();

			int start = line == 0 ? 0 : lineMgr.getLineEndOffset(line - 1);
			int end = lineMgr.getLineEndOffset(line);

			return getSegment(start,end - start - 1);
		}
		finally
		{
			readUnlock();
		}
	} //}}}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1152" endline="1169">
private final int jjMoveStringLiteralDfa22_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);
      return 22;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa23_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1170" endline="1187">
private final int jjMoveStringLiteralDfa23_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);
      return 23;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa24_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1152" endline="1169">
private final int jjMoveStringLiteralDfa22_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);
      return 22;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa23_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1188" endline="1205">
private final int jjMoveStringLiteralDfa24_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1152" endline="1169">
private final int jjMoveStringLiteralDfa22_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);
      return 22;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa23_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1206" endline="1223">
private final int jjMoveStringLiteralDfa25_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1152" endline="1169">
private final int jjMoveStringLiteralDfa22_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);
      return 22;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa23_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1224" endline="1241">
private final int jjMoveStringLiteralDfa26_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);
      return 26;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa27_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1170" endline="1187">
private final int jjMoveStringLiteralDfa23_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);
      return 23;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa24_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1188" endline="1205">
private final int jjMoveStringLiteralDfa24_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1170" endline="1187">
private final int jjMoveStringLiteralDfa23_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);
      return 23;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa24_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1206" endline="1223">
private final int jjMoveStringLiteralDfa25_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1170" endline="1187">
private final int jjMoveStringLiteralDfa23_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);
      return 23;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa24_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1224" endline="1241">
private final int jjMoveStringLiteralDfa26_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);
      return 26;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa27_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1188" endline="1205">
private final int jjMoveStringLiteralDfa24_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1206" endline="1223">
private final int jjMoveStringLiteralDfa25_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1188" endline="1205">
private final int jjMoveStringLiteralDfa24_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1224" endline="1241">
private final int jjMoveStringLiteralDfa26_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);
      return 26;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa27_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1206" endline="1223">
private final int jjMoveStringLiteralDfa25_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1224" endline="1241">
private final int jjMoveStringLiteralDfa26_0(long old2, long active2)
{
   if (((active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);
      return 26;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa27_0(active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, active2);
}
</source>
    </clone>
    <clone nlines="29" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/Macros.java" startline="151" endline="181">
	public static void message(final Component comp, final String message)
	{
		if (EventQueue.isDispatchThread())
		{
			GUIUtilities.hideSplashScreen();
	
			JOptionPane.showMessageDialog(comp,message,
				jEdit.getProperty("macro-message.title"),
				JOptionPane.INFORMATION_MESSAGE);
		}
		else
		{
			try
			{
				EventQueue.invokeAndWait(new Runnable()
				{
					@Override
					public void run()
					{
						message(comp, message);
					}
				});
			}
			catch (Exception e)
			{
				// ignored
			}
		}
		
		
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/Macros.java" startline="191" endline="219">
	public static void error(final Component comp, final String message)
	{
		if (EventQueue.isDispatchThread())
		{
			GUIUtilities.hideSplashScreen();
	
			JOptionPane.showMessageDialog(comp,message,
				jEdit.getProperty("macro-message.title"),
				JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			try
			{
				EventQueue.invokeAndWait(new Runnable()
				{
					@Override
					public void run()
					{
						message(comp, message);
					}
				});
			}
			catch (Exception e)
			{
				// ignored
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="19" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5411" endline="5429">
	private void fireStatusChanged(int flag, boolean value)
	{
		Object[] listeners = listenerList.getListenerList();
		for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.statusChanged(this,flag,value);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="5432" endline="5450">
	private void fireBracketSelected(int line, String text)
	{
		Object[] listeners = listenerList.getListenerList();
		for(int i = listeners.length - 2; i &gt;= 0; i--)
		{
			if(listeners[i] == StatusListener.class)
			{
				try
				{
					((StatusListener)listeners[i+1])
						.bracketSelected(this,line,text);
				}
				catch(Throwable t)
				{
					Log.log(Log.ERROR,this,t);
				}
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/textarea/JEditTextArea.java" startline="104" endline="121">
	@Override
	public void home(boolean select)
	{
		Macros.Recorder recorder = view.getMacroRecorder();
		switch(getInputHandler().getLastActionCount() % 2)
		{
		case 1:
			if(recorder != null)
				recorder.record("textArea.goToStartOfWhiteSpace(" + select + ");");			
			goToStartOfWhiteSpace(select);
			break;
		default:
			if(recorder != null)
				recorder.record("textArea.goToStartOfLine(" + select + ");");			
			goToStartOfLine(select);
			break;
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/textarea/JEditTextArea.java" startline="127" endline="145">
	@Override
	public void end(boolean select)
	{
		Macros.Recorder recorder = view.getMacroRecorder();

		switch(getInputHandler().getLastActionCount() % 2)
		{
		case 1:
			if(recorder != null)
				recorder.record("textArea.goToEndOfWhiteSpace(" + select + ");");
			goToEndOfWhiteSpace(select);
			break;
		default:
			if(recorder != null)
				recorder.record("textArea.goToEndOfLine(" + select + ");");
			goToEndOfLine(select);
			break;
		}
	} //}}}
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/statusbar/EncodingWidgetFactory.java" startline="56" endline="70">
		public EncodingWidget(final View view) 
		{
			encoding = new ToolTipLabel();
			this.view = view;
			encoding.setToolTipText(jEdit.getProperty("view.status.mode-tooltip"));
			encoding.addMouseListener(new MouseAdapter() 
						  {
							  @Override
							  public void mouseClicked(MouseEvent evt)
							  {
								  if(evt.getClickCount() == 2)
									  new BufferOptions(view,view.getBuffer());
							  }
						  });
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/FoldWidgetFactory.java" startline="57" endline="71">
		public FoldWidget(final View view) 
		{
			fold = new ToolTipLabel();
			this.view = view;
			fold.setToolTipText(jEdit.getProperty("view.status.mode-tooltip"));
			fold.addMouseListener(new MouseAdapter() 
					      {
						      @Override
						      public void mouseClicked(MouseEvent evt)
						      {
							      if(evt.getClickCount() == 2)
								      new BufferOptions(view,view.getBuffer());
						      }
					      });
		}
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/statusbar/EncodingWidgetFactory.java" startline="56" endline="70">
		public EncodingWidget(final View view) 
		{
			encoding = new ToolTipLabel();
			this.view = view;
			encoding.setToolTipText(jEdit.getProperty("view.status.mode-tooltip"));
			encoding.addMouseListener(new MouseAdapter() 
						  {
							  @Override
							  public void mouseClicked(MouseEvent evt)
							  {
								  if(evt.getClickCount() == 2)
									  new BufferOptions(view,view.getBuffer());
							  }
						  });
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/ModeWidgetFactory.java" startline="56" endline="70">
	    public ModeWidget(final View view) 
	    {
		    mode = new ToolTipLabel();
		    this.view = view;
		    mode.setToolTipText(jEdit.getProperty("view.status.mode-tooltip"));
		    mode.addMouseListener(new MouseAdapter() 
					  {
						  @Override
						  public void mouseClicked(MouseEvent evt)
						  {
							  if(evt.getClickCount() == 2)
								  new BufferOptions(view,view.getBuffer());
						  }
					  });
	    }
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/statusbar/FoldWidgetFactory.java" startline="57" endline="71">
		public FoldWidget(final View view) 
		{
			fold = new ToolTipLabel();
			this.view = view;
			fold.setToolTipText(jEdit.getProperty("view.status.mode-tooltip"));
			fold.addMouseListener(new MouseAdapter() 
					      {
						      @Override
						      public void mouseClicked(MouseEvent evt)
						      {
							      if(evt.getClickCount() == 2)
								      new BufferOptions(view,view.getBuffer());
						      }
					      });
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/ModeWidgetFactory.java" startline="56" endline="70">
	    public ModeWidget(final View view) 
	    {
		    mode = new ToolTipLabel();
		    this.view = view;
		    mode.setToolTipText(jEdit.getProperty("view.status.mode-tooltip"));
		    mode.addMouseListener(new MouseAdapter() 
					  {
						  @Override
						  public void mouseClicked(MouseEvent evt)
						  {
							  if(evt.getClickCount() == 2)
								  new BufferOptions(view,view.getBuffer());
						  }
					  });
	    }
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2466" endline="2483">
	protected void fireContentInserted(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2486" endline="2503">
	protected void fireContentRemoved(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2466" endline="2483">
	protected void fireContentInserted(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2506" endline="2523">
	protected void firePreContentInserted(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2466" endline="2483">
	protected void fireContentInserted(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2526" endline="2543">
	protected void firePreContentRemoved(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2486" endline="2503">
	protected void fireContentRemoved(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2506" endline="2523">
	protected void firePreContentInserted(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2486" endline="2503">
	protected void fireContentRemoved(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.contentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2526" endline="2543">
	protected void firePreContentRemoved(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="18" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2506" endline="2523">
	protected void firePreContentInserted(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentInserted(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2526" endline="2543">
	protected void firePreContentRemoved(int startLine, int offset,
		int numLines, int length)
	{
		for(int i = 0; i &lt; bufferListeners.size(); i++)
		{
			BufferListener listener = getListener(i);
			try
			{
				listener.preContentRemoved(this,startLine,
					offset,numLines,length);
			}
			catch(Throwable t)
			{
				Log.log(Log.ERROR,this,"Exception while sending buffer event to "+ listener +" :");
				Log.log(Log.ERROR,this,t);
			}
		}
	} //}}}
</source>
    </clone>
    <clone nlines="19" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="57" endline="73">
		MultiSelectWidget(final View view)
		{
			multiSelect = new ToolTipLabel();
			multiSelect.setHorizontalAlignment(SwingConstants.CENTER);
			multiSelect.setToolTipText(jEdit.getProperty("view.status.multi-tooltip"));
			this.view = view;
			multiSelect.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent e)
				{
					JEditTextArea textArea = view.getTextArea();
					if (textArea != null)
						textArea.toggleMultipleSelectionEnabled();
				}
			});
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="60" endline="76">
		OverwriteWidget(final View view)
		{
			overwrite = new ToolTipLabel();
			overwrite.setHorizontalAlignment(SwingConstants.CENTER);
			overwrite.setToolTipText(jEdit.getProperty("view.status.overwrite-tooltip"));
			this.view = view;
			overwrite.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent evt)
				{
					JEditTextArea textArea = view.getTextArea();
					if (textArea != null)
						textArea.toggleOverwriteEnabled();
				}
			});
		}
</source>
    </clone>
    <clone nlines="19" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/gui/statusbar/MultiSelectWidgetFactory.java" startline="57" endline="73">
		MultiSelectWidget(final View view)
		{
			multiSelect = new ToolTipLabel();
			multiSelect.setHorizontalAlignment(SwingConstants.CENTER);
			multiSelect.setToolTipText(jEdit.getProperty("view.status.multi-tooltip"));
			this.view = view;
			multiSelect.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent e)
				{
					JEditTextArea textArea = view.getTextArea();
					if (textArea != null)
						textArea.toggleMultipleSelectionEnabled();
				}
			});
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="59" endline="75">
	    RectSelectWidget(final View view)
	    {
		    rectSelect = new ToolTipLabel();
		    rectSelect.setHorizontalAlignment(SwingConstants.CENTER);
		    rectSelect.setToolTipText(jEdit.getProperty("view.status.rect-tooltip"));
		    this.view = view;
		    rectSelect.addMouseListener(new MouseAdapter()
		    {
			    @Override
			    public void mouseClicked(MouseEvent evt)
			    {
				    JEditTextArea textArea = view.getTextArea();
				    if (textArea != null)
				    	textArea.toggleRectangularSelectionEnabled();
			    }
		    });
	    }
</source>
    </clone>
    <clone nlines="19" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/gui/statusbar/OverwriteWidgetFactory.java" startline="60" endline="76">
		OverwriteWidget(final View view)
		{
			overwrite = new ToolTipLabel();
			overwrite.setHorizontalAlignment(SwingConstants.CENTER);
			overwrite.setToolTipText(jEdit.getProperty("view.status.overwrite-tooltip"));
			this.view = view;
			overwrite.addMouseListener(new MouseAdapter()
			{
				@Override
				public void mouseClicked(MouseEvent evt)
				{
					JEditTextArea textArea = view.getTextArea();
					if (textArea != null)
						textArea.toggleOverwriteEnabled();
				}
			});
		}
</source>
        <source file="org/gjt/sp/jedit/gui/statusbar/RectSelectWidgetFactory.java" startline="59" endline="75">
	    RectSelectWidget(final View view)
	    {
		    rectSelect = new ToolTipLabel();
		    rectSelect.setHorizontalAlignment(SwingConstants.CENTER);
		    rectSelect.setToolTipText(jEdit.getProperty("view.status.rect-tooltip"));
		    this.view = view;
		    rectSelect.addMouseListener(new MouseAdapter()
		    {
			    @Override
			    public void mouseClicked(MouseEvent evt)
			    {
				    JEditTextArea textArea = view.getTextArea();
				    if (textArea != null)
				    	textArea.toggleRectangularSelectionEnabled();
			    }
		    });
	    }
</source>
    </clone>
    <clone nlines="19" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1422" endline="1440">
			@Override
			public void componentMoved(ComponentEvent evt)
			{
				if(System.currentTimeMillis() - start &lt; 1000L)
				{
					Rectangle r = win.getBounds();
					if(!windowOpened &amp;&amp; r.equals(required))
						return;

					if(!r.equals(desired))
					{
						Log.log(Log.DEBUG,GUIUtilities.class,
							"Window resize blocked: " + win.getBounds());
						win.setBounds(desired);
					}
				}

				win.removeComponentListener(this);
			} //}}}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="1443" endline="1461">
			@Override
			public void componentResized(ComponentEvent evt)
			{
				if(System.currentTimeMillis() - start &lt; 1000L)
				{
					Rectangle r = win.getBounds();
					if(!windowOpened &amp;&amp; r.equals(required))
						return;

					if(!r.equals(desired))
					{
						Log.log(Log.DEBUG,GUIUtilities.class,
							"Window resize blocked: " + win.getBounds());
						win.setBounds(desired);
					}
				}

				win.removeComponentListener(this);
			} //}}}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="642" endline="662">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="664" endline="684">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="686" endline="706">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/gui/OptionsDialog.java" startline="708" endline="728">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="459" endline="479">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="481" endline="501">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="503" endline="523">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- type 1 -->
        <source file="org/jedit/options/OptionGroupPane.java" startline="525" endline="545">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/PluginOptionGroup.java" startline="160" endline="180">
		protected void fireNodesChanged(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesChanged(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/PluginOptionGroup.java" startline="182" endline="202">
		protected void fireNodesInserted(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesInserted(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers -->
        <source file="org/jedit/options/PluginOptionGroup.java" startline="204" endline="224">
		protected void fireNodesRemoved(Object source, Object[] path,
			int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeNodesRemoved(modelEvent);
			}
		}
</source>
        <source file="org/jedit/options/PluginOptionGroup.java" startline="226" endline="246">
		protected void fireTreeStructureChanged(Object source,
			Object[] path, int[] childIndices, Object[] children)
		{
			Object[] listeners = listenerList.getListenerList();

			TreeModelEvent modelEvent = null;
			for (int i = listeners.length - 2; i &gt;= 0; i -= 2)
			{
				if (listeners[i] != TreeModelListener.class)
					continue;

				if (modelEvent == null)
				{
					modelEvent = new TreeModelEvent(source,
						path, childIndices, children);
				}

				((TreeModelListener)listeners[i + 1])
					.treeStructureChanged(modelEvent);
			}
		}
</source>
    </clone>
    <clone nlines="16" similarity="100">
        <!-- identifiers -->
        <source file="de/masters_of_disaster/ant/tasks/ar/ArUtils.java" startline="87" endline="102">
    public static int getLongBytes(long value, byte[] buf, int offset, int length) {
        int i;
        String tmp = Long.toString(value);
        int c = tmp.length();

        for (i=0 ; i&lt;length &amp;&amp; i&lt;c ; i++) {
            buf[offset+i] = (byte) tmp.charAt(i);
        }

        while (i&lt;length) {
            buf[offset+i] = (byte) ' ';
            i++;
        }

        return offset + length;
    }
</source>
        <source file="de/masters_of_disaster/ant/tasks/ar/ArUtils.java" startline="113" endline="128">
    public static int getIntegerBytes(int value, byte[] buf, int offset, int length) {
        int i;
        String tmp = Integer.toString(value);
        int c = tmp.length();

        for (i=0 ; i&lt;length &amp;&amp; i&lt;c ; i++) {
            buf[offset+i] = (byte) tmp.charAt(i);
        }

        while (i&lt;length) {
            buf[offset+i] = (byte) ' ';
            i++;
        }

        return offset + length;
    }
</source>
    </clone>
    <clone nlines="16" similarity="100">
        <!-- identifiers -->
        <source file="de/masters_of_disaster/ant/tasks/ar/ArUtils.java" startline="87" endline="102">
    public static int getLongBytes(long value, byte[] buf, int offset, int length) {
        int i;
        String tmp = Long.toString(value);
        int c = tmp.length();

        for (i=0 ; i&lt;length &amp;&amp; i&lt;c ; i++) {
            buf[offset+i] = (byte) tmp.charAt(i);
        }

        while (i&lt;length) {
            buf[offset+i] = (byte) ' ';
            i++;
        }

        return offset + length;
    }
</source>
        <source file="de/masters_of_disaster/ant/tasks/ar/ArUtils.java" startline="139" endline="154">
    public static int getOctalBytes(long value, byte[] buf, int offset, int length) {
        int i;
        String tmp = Long.toOctalString(value);
        int c = tmp.length();

        for (i=0 ; i&lt;length &amp;&amp; i&lt;c ; i++) {
            buf[offset+i] = (byte) tmp.charAt(i);
        }

        while (i&lt;length) {
            buf[offset+i] = (byte) ' ';
            i++;
        }

        return offset + length;
    }
</source>
    </clone>
    <clone nlines="16" similarity="100">
        <!-- identifiers -->
        <source file="de/masters_of_disaster/ant/tasks/ar/ArUtils.java" startline="113" endline="128">
    public static int getIntegerBytes(int value, byte[] buf, int offset, int length) {
        int i;
        String tmp = Integer.toString(value);
        int c = tmp.length();

        for (i=0 ; i&lt;length &amp;&amp; i&lt;c ; i++) {
            buf[offset+i] = (byte) tmp.charAt(i);
        }

        while (i&lt;length) {
            buf[offset+i] = (byte) ' ';
            i++;
        }

        return offset + length;
    }
</source>
        <source file="de/masters_of_disaster/ant/tasks/ar/ArUtils.java" startline="139" endline="154">
    public static int getOctalBytes(long value, byte[] buf, int offset, int length) {
        int i;
        String tmp = Long.toOctalString(value);
        int c = tmp.length();

        for (i=0 ; i&lt;length &amp;&amp; i&lt;c ; i++) {
            buf[offset+i] = (byte) tmp.charAt(i);
        }

        while (i&lt;length) {
            buf[offset+i] = (byte) ' ';
            i++;
        }

        return offset + length;
    }
</source>
    </clone>
    <clone nlines="20" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1740" endline="1759">
  final public void PreIncrementExpression() throws ParseException {
  Token t = null;
    t = jj_consume_token(INCR);
    PrimaryExpression();
      BSHUnaryExpression jjtn001 = new BSHUnaryExpression(JJTUNARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1761" endline="1780">
  final public void PreDecrementExpression() throws ParseException {
  Token t = null;
    t = jj_consume_token(DECR);
    PrimaryExpression();
      BSHUnaryExpression jjtn001 = new BSHUnaryExpression(JJTUNARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/gui/FilePropertiesDialog.java" startline="169" endline="185">
	public JPanel createSouthPanelAll()
	{
		ButtonActionHandler actionHandler = new ButtonActionHandler();
		JPanel southPanel = new JPanel(new BorderLayout());

		JPanel buttonsField = new JPanel();
		okButton = new JButton(jEdit.getProperty("fileprop.okBtn"));
		buttonsField.add(okButton);
		okButton.addActionListener(actionHandler);
		cancelButton = new JButton(jEdit.getProperty("fileprop.cancelBtn"));
		buttonsField.add(cancelButton);
		cancelButton.addActionListener(actionHandler);

		southPanel.add(BorderLayout.EAST, buttonsField);

		return southPanel;
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/gui/FilePropertiesDialog.java" startline="272" endline="288">
	public JPanel createSouthPanel()
	{
		ButtonActionHandler actionHandler = new ButtonActionHandler();
		JPanel southPanel = new JPanel(new BorderLayout());

		JPanel buttonsField = new JPanel();
		okButton = new JButton(jEdit.getProperty("fileprop.okBtn"));
		buttonsField.add(okButton);
		okButton.addActionListener(actionHandler);
		cancelButton = new JButton(jEdit.getProperty("fileprop.cancelBtn"));
		buttonsField.add(cancelButton);
		cancelButton.addActionListener(actionHandler);

		southPanel.add(BorderLayout.EAST, buttonsField);

		return southPanel;
	} //}}}
</source>
    </clone>
    <clone nlines="30" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="690" endline="719">
	public static void message(final Component comp, final String name, final Object[] args)
	{
		if (EventQueue.isDispatchThread())
		{
			hideSplashScreen();

			JOptionPane.showMessageDialog(comp,
				jEdit.getProperty(name.concat(".message"),args),
				jEdit.getProperty(name.concat(".title"),args),
				JOptionPane.INFORMATION_MESSAGE);
		}
                else
                {
                        try
                        {
                            EventQueue.invokeAndWait(new Runnable()
                            {
                                    @Override
                                    public void run()
                                    {
                                            message(comp, name, args);
                                    }
                            });
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }
                }
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/GUIUtilities.java" startline="734" endline="763">
	public static void error(final Component comp, final String name, final Object[] args)
	{
		if (EventQueue.isDispatchThread())
		{
			hideSplashScreen();

			JOptionPane.showMessageDialog(comp,
				jEdit.getProperty(name.concat(".message"),args),
				jEdit.getProperty(name.concat(".title"),args),
				JOptionPane.ERROR_MESSAGE);
		}
                else
                {
                        try
                        {
                                EventQueue.invokeAndWait(new Runnable()
                                {
                                        @Override
                                        public void run()
                                        {
                                                error(comp, name, args);
                                        }
                                });
                        }
                        catch (Exception e)
                        {
                                // ignored
                        }
                }
	} //}}}
</source>
    </clone>
    <clone nlines="28" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="4300" endline="4327">
	public void spacesToTabs()
	{
		Selection[] selection = getSelection();

		if(!buffer.isEditable())
		{
			getToolkit().beep();
			return;
		}

		buffer.beginCompoundEdit();

		if(selection.length == 0)
		{
			setText(TextUtilities.spacesToTabs(
				getText(), buffer.getTabSize()));
		}
		else
		{
			for (Selection s : selection)
			{
				setSelectedText(s, TextUtilities.spacesToTabs(
					getSelectedText(s), buffer.getTabSize()));
			}
		}

		buffer.endCompoundEdit();
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="4334" endline="4361">
	public void tabsToSpaces()
	{
		Selection[] selection = getSelection();

		if(!buffer.isEditable())
		{
			getToolkit().beep();
			return;
		}

		buffer.beginCompoundEdit();

		if(selection.length == 0)
		{
			setText(TextUtilities.tabsToSpaces(
				getText(), buffer.getTabSize()));
		}
		else
		{
			for (Selection s : selection)
			{
				setSelectedText(s, TextUtilities.tabsToSpaces(
					getSelectedText(s), buffer.getTabSize()));
			}
		}

		buffer.endCompoundEdit();
	} //}}}
</source>
    </clone>
    <clone nlines="27" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3774" endline="3800">
  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="4365" endline="4391">
  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }
</source>
    </clone>
    <clone nlines="28" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3331" endline="3357">
  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  BSHReturnStatement jjtn000 = new BSHReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtreeCloseNodeScope(jjtn000);
                                 jjtn000.kind = BREAK;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="3359" endline="3385">
  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  BSHReturnStatement jjtn000 = new BSHReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    jjtreeCloseNodeScope(jjtn000);
                                    jjtn000.kind = CONTINUE;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }
</source>
    </clone>
    <clone nlines="24" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="961" endline="982">
private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &amp;= old1) | (active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000000L, active2, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1003" endline="1024">
private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &amp;= old1) | (active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000000L, active2, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2);
}
</source>
    </clone>
    <clone nlines="24" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="961" endline="982">
private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &amp;= old1) | (active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000000L, active2, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1025" endline="1046">
private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &amp;= old1) | (active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active1, 0x20000000000000L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2);
}
</source>
    </clone>
    <clone nlines="24" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1003" endline="1024">
private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &amp;= old1) | (active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000000L, active2, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2);
}
</source>
        <source file="org/gjt/sp/jedit/bsh/ParserTokenManager.java" startline="1025" endline="1046">
private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &amp;= old1) | (active2 &amp;= old2)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active1, 0x20000000000000L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2);
}
</source>
    </clone>
    <clone nlines="26" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/textarea/JEditTextArea.java" startline="151" endline="177">
	@Override
	public void smartHome(boolean select)
	{
		Macros.Recorder recorder = view.getMacroRecorder();

		switch(view.getInputHandler().getLastActionCount())
		{
		case 1:
			if(recorder != null)
				recorder.record("textArea.goToStartOfWhiteSpace(" + select + ");");

			goToStartOfWhiteSpace(select);
			break;
		case 2:
			if(recorder != null)
				recorder.record("textArea.goToStartOfLine(" + select + ");");

			goToStartOfLine(select);
			break;
		default: //case 3:
			if(recorder != null)
				recorder.record("textArea.goToFirstVisibleLine(" + select + ");");

			goToFirstVisibleLine(select);
			break;
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/textarea/JEditTextArea.java" startline="183" endline="208">
	@Override
	public void smartEnd(boolean select)
	{
		Macros.Recorder recorder = view.getMacroRecorder();

		switch(view.getInputHandler().getLastActionCount())
		{
		case 1:
			if(recorder != null)
				recorder.record("textArea.goToEndOfWhiteSpace(" + select + ");");

			goToEndOfWhiteSpace(select);
			break;
		case 2:
			if(recorder != null)
				recorder.record("textArea.goToEndOfLine(" + select + ");");

			goToEndOfLine(select);
			break;
		default: //case 3:
			if(recorder != null)
				recorder.record("textArea.goToLastVisibleLine(" + select + ");");
			goToLastVisibleLine(select);
			break;
		}
	} //}}}
</source>
    </clone>
    <clone nlines="35" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2102" endline="2136">
	public void undo(TextArea textArea)
	{
		if(undoMgr == null)
			return;

		if(!isEditable())
		{
			textArea.getToolkit().beep();
			return;
		}

		try
		{
			writeLock();

			undoInProgress = true;
			fireBeginUndo();
			Selection[] s = undoMgr.undo();
			if(s == null || s.length == 0)
				textArea.getToolkit().beep();
			else
			{
				textArea.setCaretPosition(s[s.length - 1].getEnd());
				textArea.setSelection(s);
			}
			fireEndUndo();
			fireTransactionComplete();
		}
		finally
		{
			undoInProgress = false;

			writeUnlock();
		}
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/buffer/JEditBuffer.java" startline="2144" endline="2179">
	public void redo(TextArea textArea)
	{
		if(undoMgr == null)
			return;

		if(!isEditable())
		{
			Toolkit.getDefaultToolkit().beep();
			return;
		}

		try
		{
			writeLock();

			undoInProgress = true;
			fireBeginRedo();
			Selection[] s = undoMgr.redo();
			if(s == null || s.length == 0)
				textArea.getToolkit().beep();
			else
			{
				textArea.setCaretPosition(s[s.length - 1].getEnd());
				textArea.setSelection(s);
			}

			fireEndRedo();
			fireTransactionComplete();
		}
		finally
		{
			undoInProgress = false;

			writeUnlock();
		}
	} //}}}
</source>
    </clone>
    <clone nlines="33" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="4368" endline="4400">
	public void toUpperCase()
	{
		if(!buffer.isEditable())
		{
			getToolkit().beep();
			return;
		}

		Selection[] selection = getSelection();
		int caret = -1;
		if (selection.length == 0)
		{
			caret = getCaretPosition();
			selectWord();
			selection = getSelection();
		}
		if (selection.length == 0)
		{
			if (caret != -1)
				setCaretPosition(caret);
			getToolkit().beep();
			return;
		}

		buffer.beginCompoundEdit();

		for (Selection s : selection)
			setSelectedText(s, getSelectedText(s).toUpperCase());

		buffer.endCompoundEdit();
		if (caret != -1)
			setCaretPosition(caret);
	} //}}}
</source>
        <source file="org/gjt/sp/jedit/textarea/TextArea.java" startline="4407" endline="4439">
	public void toLowerCase()
	{
		if(!buffer.isEditable())
		{
			getToolkit().beep();
			return;
		}

		Selection[] selection = getSelection();
		int caret = -1;
		if (selection.length == 0)
		{
			caret = getCaretPosition();
			selectWord();
			selection = getSelection();
		}
		if (selection.length == 0)
		{
			if (caret != -1)
				setCaretPosition(caret);
			getToolkit().beep();
			return;
		}

		buffer.beginCompoundEdit();

		for (Selection s : selection)
			setSelectedText(s, getSelectedText(s).toLowerCase());

		buffer.endCompoundEdit();
		if (caret != -1)
			setCaretPosition(caret);
	} //}}}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers, literals -->
        <source file="test/org/jedit/io/Native2ASCIIEncodingTest.java" startline="647" endline="660">
	@Test
	public void read_charArray_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException
	{
		int c = getReader("\\nu21aF").read(bufferArray);
		assertThat(c, is(equalTo(7)));
		int i = 0;
		assertThat(bufferArray[i++], is(equalTo('\\')));
		assertThat(bufferArray[i++], is(equalTo('n')));
		assertThat(bufferArray[i++], is(equalTo('u')));
		assertThat(bufferArray[i++], is(equalTo('2')));
		assertThat(bufferArray[i++], is(equalTo('1')));
		assertThat(bufferArray[i++], is(equalTo('a')));
		assertThat(bufferArray[i++], is(equalTo('F')));
	}
</source>
        <source file="test/org/jedit/io/Native2ASCIIEncodingTest.java" startline="829" endline="842">
	@Test
	public void read_charArray_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException
	{
		int c = getReader("\\\\u21aF").read(bufferArray);
		assertThat(c, is(equalTo(7)));
		int i = 0;
		assertThat(bufferArray[i++], is(equalTo('\\')));
		assertThat(bufferArray[i++], is(equalTo('\\')));
		assertThat(bufferArray[i++], is(equalTo('u')));
		assertThat(bufferArray[i++], is(equalTo('2')));
		assertThat(bufferArray[i++], is(equalTo('1')));
		assertThat(bufferArray[i++], is(equalTo('a')));
		assertThat(bufferArray[i++], is(equalTo('F')));
	}
</source>
    </clone>
    <clone nlines="14" similarity="100">
        <!-- identifiers, literals -->
        <source file="test/org/jedit/io/Native2ASCIIEncodingTest.java" startline="662" endline="675">
	@Test
	public void read_charArray_int_int_ShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException
	{
		int c = getReader("\\nu21aF").read(bufferArray, 0, 7);
		assertThat(c, is(equalTo(7)));
		int i = 0;
		assertThat(bufferArray[i++], is(equalTo('\\')));
		assertThat(bufferArray[i++], is(equalTo('n')));
		assertThat(bufferArray[i++], is(equalTo('u')));
		assertThat(bufferArray[i++], is(equalTo('2')));
		assertThat(bufferArray[i++], is(equalTo('1')));
		assertThat(bufferArray[i++], is(equalTo('a')));
		assertThat(bufferArray[i++], is(equalTo('F')));
	}
</source>
        <source file="test/org/jedit/io/Native2ASCIIEncodingTest.java" startline="844" endline="857">
	@Test
	public void read_charArray_int_int_ShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException
	{
		int c = getReader("\\\\u21aF").read(bufferArray, 0, 7);
		assertThat(c, is(equalTo(7)));
		int i = 0;
		assertThat(bufferArray[i++], is(equalTo('\\')));
		assertThat(bufferArray[i++], is(equalTo('\\')));
		assertThat(bufferArray[i++], is(equalTo('u')));
		assertThat(bufferArray[i++], is(equalTo('2')));
		assertThat(bufferArray[i++], is(equalTo('1')));
		assertThat(bufferArray[i++], is(equalTo('a')));
		assertThat(bufferArray[i++], is(equalTo('F')));
	}
</source>
    </clone>
    <clone nlines="17" similarity="100">
        <!-- identifiers, literals -->
        <source file="test/org/jedit/io/Native2ASCIIEncodingTest.java" startline="222" endline="238">
	@Test
	public void permissiveReadShouldAcceptIncompleteEscapeSequence() throws IOException
	{
		Reader reader = getPermissiveReader("\\u21a");
		int c = reader.read();
		assertThat((char) c, is(equalTo('\\')));
		c = reader.read();
		assertThat((char) c, is(equalTo('u')));
		c = reader.read();
		assertThat((char) c, is(equalTo('2')));
		c = reader.read();
		assertThat((char) c, is(equalTo('1')));
		c = reader.read();
		assertThat((char) c, is(equalTo('a')));
		c = reader.read();
		assertThat(c, is(equalTo(-1)));
	}
</source>
        <source file="test/org/jedit/io/Native2ASCIIEncodingTest.java" startline="497" endline="513">
	@Test
	public void readShouldCorrectlyHandleLessThan5NonEscapeCharactersAfterBackslash() throws IOException
	{
		Reader reader = getReader("\\asdf");
		int c = reader.read();
		assertThat((char) c, is(equalTo('\\')));
		c = reader.read();
		assertThat((char) c, is(equalTo('a')));
		c = reader.read();
		assertThat((char) c, is(equalTo('s')));
		c = reader.read();
		assertThat((char) c, is(equalTo('d')));
		c = reader.read();
		assertThat((char) c, is(equalTo('f')));
		c = reader.read();
		assertThat(c, is(equalTo(-1)));
	}
</source>
    </clone>
    <clone nlines="37" similarity="100">
        <!-- type 1 -->
        <source file="org/gjt/sp/jedit/textarea/Selection.java" startline="309" endline="345">
		@Override
		boolean contentRemoved(JEditBuffer buffer, int startLine, int start,
			int numLines, int length)
		{
			int end = start + length;
			boolean changed = false;

			if(this.start &gt; start &amp;&amp; this.start &lt;= end)
			{
				this.start = start;
				changed = true;
			}
			else if(this.start &gt; end)
			{
				this.start -= length;
				changed = true;
			}

			if(this.end &gt; start &amp;&amp; this.end &lt;= end)
			{
				this.end = start;
				changed = true;
			}
			else if(this.end &gt; end)
			{
				this.end -= length;
				changed = true;
			}

			if(changed &amp;&amp; numLines != 0)
			{
				this.startLine = buffer.getLineOfOffset(this.start);
				this.endLine = buffer.getLineOfOffset(this.end);
			}

			return changed;
		} //}}}
</source>
        <source file="org/gjt/sp/jedit/textarea/Selection.java" startline="711" endline="747">
		@Override
		boolean contentRemoved(JEditBuffer buffer, int startLine, int start,
			int numLines, int length)
		{
			int end = start + length;
			boolean changed = false;

			if(this.start &gt; start &amp;&amp; this.start &lt;= end)
			{
				this.start = start;
				changed = true;
			}
			else if(this.start &gt; end)
			{
				this.start -= length;
				changed = true;
			}

			if(this.end &gt; start &amp;&amp; this.end &lt;= end)
			{
				this.end = start;
				changed = true;
			}
			else if(this.end &gt; end)
			{
				this.end -= length;
				changed = true;
			}

			if(changed &amp;&amp; numLines != 0)
			{
				this.startLine = buffer.getLineOfOffset(this.start);
				this.endLine = buffer.getLineOfOffset(this.end);
			}

			return changed;
		} //}}}
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1181" endline="1222">
  final public void ConditionalOrExpression() throws ParseException {
  Token t=null;
    ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1224" endline="1265">
  final public void ConditionalAndExpression() throws ParseException {
  Token t=null;
    InclusiveOrExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1181" endline="1222">
  final public void ConditionalOrExpression() throws ParseException {
  Token t=null;
    ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1267" endline="1308">
  final public void InclusiveOrExpression() throws ParseException {
  Token t=null;
    ExclusiveOrExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1181" endline="1222">
  final public void ConditionalOrExpression() throws ParseException {
  Token t=null;
    ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1342" endline="1383">
  final public void AndExpression() throws ParseException {
  Token t=null;
    EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1181" endline="1222">
  final public void ConditionalOrExpression() throws ParseException {
  Token t=null;
    ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1385" endline="1426">
  final public void EqualityExpression() throws ParseException {
  Token t = null;
    InstanceOfExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1181" endline="1222">
  final public void ConditionalOrExpression() throws ParseException {
  Token t=null;
    ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
      case BOOL_ORX:
        ;
        break;
      default:
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_OR:
        t = jj_consume_token(BOOL_OR);
        break;
      case BOOL_ORX:
        t = jj_consume_token(BOOL_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalAndExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1582" endline="1623">
  final public void AdditiveExpression() throws ParseException {
  Token t = null;
    MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1224" endline="1265">
  final public void ConditionalAndExpression() throws ParseException {
  Token t=null;
    InclusiveOrExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1267" endline="1308">
  final public void InclusiveOrExpression() throws ParseException {
  Token t=null;
    ExclusiveOrExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1224" endline="1265">
  final public void ConditionalAndExpression() throws ParseException {
  Token t=null;
    InclusiveOrExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1342" endline="1383">
  final public void AndExpression() throws ParseException {
  Token t=null;
    EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1224" endline="1265">
  final public void ConditionalAndExpression() throws ParseException {
  Token t=null;
    InclusiveOrExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1385" endline="1426">
  final public void EqualityExpression() throws ParseException {
  Token t = null;
    InstanceOfExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1224" endline="1265">
  final public void ConditionalAndExpression() throws ParseException {
  Token t=null;
    InclusiveOrExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
      case BOOL_ANDX:
        ;
        break;
      default:
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_AND:
        t = jj_consume_token(BOOL_AND);
        break;
      case BOOL_ANDX:
        t = jj_consume_token(BOOL_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1582" endline="1623">
  final public void AdditiveExpression() throws ParseException {
  Token t = null;
    MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1267" endline="1308">
  final public void InclusiveOrExpression() throws ParseException {
  Token t=null;
    ExclusiveOrExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1342" endline="1383">
  final public void AndExpression() throws ParseException {
  Token t=null;
    EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1267" endline="1308">
  final public void InclusiveOrExpression() throws ParseException {
  Token t=null;
    ExclusiveOrExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1385" endline="1426">
  final public void EqualityExpression() throws ParseException {
  Token t = null;
    InstanceOfExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1267" endline="1308">
  final public void InclusiveOrExpression() throws ParseException {
  Token t=null;
    ExclusiveOrExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
      case BIT_ORX:
        ;
        break;
      default:
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case BIT_ORX:
        t = jj_consume_token(BIT_ORX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExclusiveOrExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1582" endline="1623">
  final public void AdditiveExpression() throws ParseException {
  Token t = null;
    MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1342" endline="1383">
  final public void AndExpression() throws ParseException {
  Token t=null;
    EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1385" endline="1426">
  final public void EqualityExpression() throws ParseException {
  Token t = null;
    InstanceOfExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1342" endline="1383">
  final public void AndExpression() throws ParseException {
  Token t=null;
    EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case BIT_ANDX:
        ;
        break;
      default:
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case BIT_ANDX:
        t = jj_consume_token(BIT_ANDX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1582" endline="1623">
  final public void AdditiveExpression() throws ParseException {
  Token t = null;
    MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
  }
</source>
    </clone>
    <clone nlines="47" similarity="100">
        <!-- identifiers -->
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1385" endline="1426">
  final public void EqualityExpression() throws ParseException {
  Token t = null;
    InstanceOfExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.kind = t.kind;
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }
</source>
        <source file="org/gjt/sp/jedit/bsh/Parser.java" startline="1582" endline="1623">
  final public void AdditiveExpression() throws ParseException {
  Token t = null;
    MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
                                                     BSHBinaryExpression jjtn001 = new BSHBinaryExpression(JJTBINARYEXPRESSION);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtreeCloseNodeScope(jjtn001);
                                                     jjtn001.kind = t.kind;
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtreeCloseNodeScope(jjtn001);
                                                     }
      }
    }
  }
</source>
    </clone>
    <clone nlines="63" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="437" endline="497">
    static Object doubleBinaryOperation(Double D1, Double D2, int kind)
        throws UtilEvalError
    {
        double lhs = D1.doubleValue();
        double rhs = D2.doubleValue();

        switch(kind)
        {
            // boolean
            case LT:
            case LTX:
                return new Boolean(lhs &lt; rhs);

            case GT:
            case GTX:
                return new Boolean(lhs &gt; rhs);

            case EQ:
                return new Boolean(lhs == rhs);

            case LE:
            case LEX:
                return new Boolean(lhs &lt;= rhs);

            case GE:
            case GEX:
                return new Boolean(lhs &gt;= rhs);

            case NE:
                return new Boolean(lhs != rhs);

            // arithmetic
            case PLUS:
                return new Double(lhs + rhs);

            case MINUS:
                return new Double(lhs - rhs);

            case STAR:
                return new Double(lhs * rhs);

            case SLASH:
                return new Double(lhs / rhs);

            case MOD:
                return new Double(lhs % rhs);

            // can't shift floating-point values
            case LSHIFT:
            case LSHIFTX:
            case RSIGNEDSHIFT:
            case RSIGNEDSHIFTX:
            case RUNSIGNEDSHIFT:
            case RUNSIGNEDSHIFTX:
                throw new UtilEvalError("Can't shift doubles");

            default:
                throw new InterpreterError(
					"Unimplemented binary double operator");
        }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="499" endline="559">
    static Object floatBinaryOperation(Float F1, Float F2, int kind)
        throws UtilEvalError
    {
        float lhs = F1.floatValue();
        float rhs = F2.floatValue();

        switch(kind)
        {
            // boolean
            case LT:
            case LTX:
                return new Boolean(lhs &lt; rhs);

            case GT:
            case GTX:
                return new Boolean(lhs &gt; rhs);

            case EQ:
                return new Boolean(lhs == rhs);

            case LE:
            case LEX:
                return new Boolean(lhs &lt;= rhs);

            case GE:
            case GEX:
                return new Boolean(lhs &gt;= rhs);

            case NE:
                return new Boolean(lhs != rhs);

            // arithmetic
            case PLUS:
                return new Float(lhs + rhs);

            case MINUS:
                return new Float(lhs - rhs);

            case STAR:
                return new Float(lhs * rhs);

            case SLASH:
                return new Float(lhs / rhs);

            case MOD:
                return new Float(lhs % rhs);

            // can't shift floats
            case LSHIFT:
            case LSHIFTX:
            case RSIGNEDSHIFT:
            case RSIGNEDSHIFTX:
            case RUNSIGNEDSHIFT:
            case RUNSIGNEDSHIFTX:
                throw new UtilEvalError("Can't shift floats ");

            default:
                throw new InterpreterError(
					"Unimplemented binary float operator");
        }
    }
</source>
    </clone>
    <clone nlines="21" similarity="100">
        <!-- identifiers, literals -->
        <source file="test/org/jedit/io/Native2ASCIIEncodingTest.java" startline="625" endline="645">
	@Test
	public void readShouldReadBackslashWithoutFollowingUAsBackslash() throws IOException
	{
		Reader reader = getReader("\\nu21aF");
		int c = reader.read();
		assertThat((char) c, is(equalTo('\\')));
		c = reader.read();
		assertThat((char) c, is(equalTo('n')));
		c = reader.read();
		assertThat((char) c, is(equalTo('u')));
		c = reader.read();
		assertThat((char) c, is(equalTo('2')));
		c = reader.read();
		assertThat((char) c, is(equalTo('1')));
		c = reader.read();
		assertThat((char) c, is(equalTo('a')));
		c = reader.read();
		assertThat((char) c, is(equalTo('F')));
		c = reader.read();
		assertThat(c, is(equalTo(-1)));
	}
</source>
        <source file="test/org/jedit/io/Native2ASCIIEncodingTest.java" startline="807" endline="827">
	@Test
	public void readShouldIgnoreEscapeSequenceThatFollowsOneBackslash() throws IOException
	{
		Reader reader = getReader("\\\\u21aF");
		int c = reader.read();
		assertThat((char) c, is(equalTo('\\')));
		c = reader.read();
		assertThat((char) c, is(equalTo('\\')));
		c = reader.read();
		assertThat((char) c, is(equalTo('u')));
		c = reader.read();
		assertThat((char) c, is(equalTo('2')));
		c = reader.read();
		assertThat((char) c, is(equalTo('1')));
		c = reader.read();
		assertThat((char) c, is(equalTo('a')));
		c = reader.read();
		assertThat((char) c, is(equalTo('F')));
		c = reader.read();
		assertThat(c, is(equalTo(-1)));
	}
</source>
    </clone>
    <clone nlines="78" similarity="100">
        <!-- identifiers, literals -->
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="283" endline="357">
    static Object longBinaryOperation(Long L1, Long L2, int kind)
    {
        long lhs = L1.longValue();
        long rhs = L2.longValue();

        switch(kind)
        {
            // boolean
            case LT:
            case LTX:
                return new Boolean(lhs &lt; rhs);

            case GT:
            case GTX:
                return new Boolean(lhs &gt; rhs);

            case EQ:
                return new Boolean(lhs == rhs);

            case LE:
            case LEX:
                return new Boolean(lhs &lt;= rhs);

            case GE:
            case GEX:
                return new Boolean(lhs &gt;= rhs);

            case NE:
                return new Boolean(lhs != rhs);

            // arithmetic
            case PLUS:
                return new Long(lhs + rhs);

            case MINUS:
                return new Long(lhs - rhs);

            case STAR:
                return new Long(lhs * rhs);

            case SLASH:
                return new Long(lhs / rhs);

            case MOD:
                return new Long(lhs % rhs);

            // bitwise
            case LSHIFT:
            case LSHIFTX:
                return new Long(lhs &lt;&lt; rhs);

            case RSIGNEDSHIFT:
            case RSIGNEDSHIFTX:
                return new Long(lhs &gt;&gt; rhs);

            case RUNSIGNEDSHIFT:
            case RUNSIGNEDSHIFTX:
                return new Long(lhs &gt;&gt;&gt; rhs);

            case BIT_AND:
            case BIT_ANDX:
                return new Long(lhs &amp; rhs);

            case BIT_OR:
            case BIT_ORX:
                return new Long(lhs | rhs);

            case XOR:
                return new Long(lhs ^ rhs);

            default:
                throw new InterpreterError(
					"Unimplemented binary long operator");
        }
    }
</source>
        <source file="org/gjt/sp/jedit/bsh/Primitive.java" startline="360" endline="434">
    static Object intBinaryOperation(Integer I1, Integer I2, int kind)
    {
        int lhs = I1.intValue();
        int rhs = I2.intValue();

        switch(kind)
        {
            // boolean
            case LT:
            case LTX:
                return new Boolean(lhs &lt; rhs);

            case GT:
            case GTX:
                return new Boolean(lhs &gt; rhs);

            case EQ:
                return new Boolean(lhs == rhs);

            case LE:
            case LEX:
                return new Boolean(lhs &lt;= rhs);

            case GE:
            case GEX:
                return new Boolean(lhs &gt;= rhs);

            case NE:
                return new Boolean(lhs != rhs);

            // arithmetic
            case PLUS:
                return new Integer(lhs + rhs);

            case MINUS:
                return new Integer(lhs - rhs);

            case STAR:
                return new Integer(lhs * rhs);

            case SLASH:
                return new Integer(lhs / rhs);

            case MOD:
                return new Integer(lhs % rhs);

            // bitwise
            case LSHIFT:
            case LSHIFTX:
                return new Integer(lhs &lt;&lt; rhs);

            case RSIGNEDSHIFT:
            case RSIGNEDSHIFTX:
                return new Integer(lhs &gt;&gt; rhs);

            case RUNSIGNEDSHIFT:
            case RUNSIGNEDSHIFTX:
                return new Integer(lhs &gt;&gt;&gt; rhs);

            case BIT_AND:
            case BIT_ANDX:
                return new Integer(lhs &amp; rhs);

            case BIT_OR:
            case BIT_ORX:
                return new Integer(lhs | rhs);

            case XOR:
                return new Integer(lhs ^ rhs);

            default:
                throw new InterpreterError(
					"Unimplemented binary integer operator");
        }
    }
</source>
    </clone>
</clones>
